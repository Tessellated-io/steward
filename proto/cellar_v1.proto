/*
* An API for cellars that implement the EIP4626-compatible Cellar.sol contract.
*
* See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)
*/

syntax = "proto3";
package steward.v3;

option go_package = "/steward_proto";

import "common.proto";

/*
* Represents a function call to a cellar that implements Cellar.sol
*/
message CellarV1 {
    // The function you wish to execute on the target cellar
    oneof function {
        // Represents function `addPosition(uint256 index, address position)`
        AddPosition add_position = 1;
        // Represents function `pushPosition(address position)`
        PushPosition push_position = 2;
        // Represents function `removePosition(uint256 index)`
        RemovePosition remove_position = 3;
        // Represents function `setHoldingPosition(address newHoldingPosition)`
        SetHoldingPosition set_holding_position = 4;
        /*
        * Represents function `rebalance(address fromPosition, address toPosition,
            uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)`
        */
        Rebalance rebalance = 5;
        // Represents function `setStrategistPayoutAddress(address payout)`
        SetStrategistPayoutAddress set_strategist_payout_address = 6;
        // Represents function `setWithdrawType(WithdrawType newWithdrawType)`
        SetWithdrawType set_withdraw_type = 7;
        // Represents function `swapPositions(uint256 index1, uint256 index2)`
        SwapPositions swap_positions = 8;
        // Represents function `setDepositLimit()`
        SetDepositLimit set_deposit_limit = 9;
        // Represents function `setLiquidityLimit()`
        SetLiquidityLimit set_liquidity_limit = 10;
        // Represents function `setShareLockPeriod()`
        SetShareLockPeriod set_share_lock_period = 11;
        // Represents function `setRebalanceDeviation(uint265)`
        SetRebalanceDeviation set_rebalance_deviation = 12;
    }

    /*
    * Insert a trusted position to the list of positions used by the cellar at a given index.
    *
    * Represents function `addPosition(uint256 index, address position)`
    */
    message AddPosition {
        // Index at which to add the position
        string index = 1;
        // Address of the position to add
        string position = 2;
    }

    /*
    * Push a trusted position to the end of the list of positions used by the cellar. If you
    know you are going to add a position to the end of the array, this is more efficient then
    `addPosition`.
    *
    * Represents function `pushPosition(address position)`
    */
    message PushPosition {
        // Address of the position to push
        string position = 1;
    }

    /*
    * Remove the position at a given index from the list of positions used by the cellar.
    *
    * Represents function `removePosition(uint256 index)`
    */
    message RemovePosition {
        // Index at which to remove the position
        string index = 1;
    }

    /*
    * Set the holding position used by the cellar.
    *
    * Represents function `setHoldingPosition(address newHoldingPosition)`
    */
    message SetHoldingPosition {
        // Address of the new holding position to use
        string new_holding_position = 1;
    }

    /*
    * Move assets between positions. To move assets from/to this cellar's holdings, specify
    the address of this cellar as the `fromPosition`/`toPosition`.
    *
    * Represents function `rebalance(address fromPosition, address toPosition,
    *  uint256 assetsFrom, SwapRouter.Exchange exchange, bytes calldata params)
    */
    message Rebalance {
        string from_position = 1;
        string to_position = 2;
        string assets_from = 3;
        Exchange exchange = 4;
        SwapParams params = 5;
    }

    /*
    * Sets the Strategists payout address.
    *
    * Represents function `setStrategistPayoutAddress(address payout)`
    */
    message SetStrategistPayoutAddress {
        string payout = 1;
    }

    /*
    * Represents the withdraw type to use for the cellar
    */
    enum WithdrawType {
        WITHDRAW_TYPE_UNSPECIFIED = 0;
        WITHDRAW_TYPE_ORDERLY = 1;
        WITHDRAW_TYPE_PROPORTIONAL = 2;
    }

    /*
    * Set the withdraw type used by the cellar.
    *
    * Represents function `setWithdrawType(WithdrawType newWithdrawType)`
    */
    message SetWithdrawType {
        // The withdraw type to use for the cellar
        WithdrawType new_withdraw_type = 1;
    }

    /*
    * Swap the positions at two given indeces.
    *
    * Represents function `swapPositions(uint256 index1, uint256 index2)`
    */
    message SwapPositions {
        // Index of the first position
        string index_1 = 1;
        // Index of the second position
        string index_2 = 2;
    }

    /*
    * Set the per-wallet deposit limit. Uses the same decimals as the current asset.
    *
    * Represents function `setDepositLimit()`
    */
    message SetDepositLimit {
        string new_limit = 1;
    }

    /*
    * Set the maximum liquidity that cellar can manage. Uses the same decimals as the current asset.
    *
    * Represents function `setLiquidityLimit()`
    */
    message SetLiquidityLimit {
        string new_limit = 1;
    }

    /*
    * Allows share lock period to be updated.
    *
    * Represents function `setShareLockPeriod()`
    */
    message SetShareLockPeriod {
        string new_lock = 1;
    }

    /*
    *
    *
    * Represents function `setRebalanceDeviation(uint256)`
    */
    message SetRebalanceDeviation {
        string new_deviation = 1;
    }
}

/*
* Represent a function call initiated through a governance proposal
*/
message CellarV1Governance {
    // The function to call on the target cellar
    oneof function {
        // Represents function `initiateShutdown()`
        InitiateShutdown initiate_shutdown = 1;
        // Represents function `liftShutdown()`
        LiftShutdown lift_shutdown = 2;
        // Represents function `resetHighWatermark()`
        ResetHighWatermark reset_high_watermark = 3;
        // Represents function `setFeesDistributor(address)`
        SetFeesDistributor set_fees_distributor = 4;
        // Represents function `setPerformanceFee(uint256)`
        SetPerformanceFee set_performance_fee = 5;
        // Represents function `setPlatformFee(uint256)`
        SetPlatformFee set_platform_fee = 6;
        // Represents function `setStrategistPerformanceCut(uint256)`
        SetStrategistPerformanceCut set_strategist_performance_cut = 7;
        // Represents function `setStrategistPlatformCut(address)`
        SetStrategistPlatformCut set_strategist_platform_cut = 8;
        // Represents function `trustPosition(address)`
        TrustPosition trust_position = 9;
    }

    // Represents function `initiateShutdown()`
    message InitiateShutdown {
    }

    // Represents function `liftShutdown()`
    message LiftShutdown {
    }

    // Represents function `resetHighWatermark()`
    message ResetHighWatermark {
    }

    // Represents function `setFeesDistributor(bytes32)`
    message SetFeesDistributor {
        // Cosmos address of the new fees distributor
        string new_fees_distributor = 1;
    }

    // Represents function `setPerformanceFee(uint64)`
    message SetPerformanceFee {
        // New performance fee
        uint64 amount = 1;
    }

    // Represents function `setPlatformFee(uint64)`
    message SetPlatformFee {
        // New platform fee
        uint64 amount = 1;
    }

    // Represents function `setStrategistPerformanceCut(uint64)`
    message SetStrategistPerformanceCut {
        // New strategist performance cut
        uint64 amount = 1;
    }

    // Represents function `setStrategistPlatformCut(uint64)`
    message SetStrategistPlatformCut {
        // New strategist platform cut
        uint64 amount = 1;
    }

    // Represents function `trustPosition(address)`
    message TrustPosition {
        oneof position {
            string erc20_address = 1;
            string erc4626_address = 2;
            string cellar_address = 3;
        }
    }
}
