//
// An API for cellars that implement V2 of the EIP4626-compatible Cellar.sol contract.
//
// See [Cellar.sol](https://github.com/PeggyJV/cellar-contracts/blob/main/src/base/Cellar.sol)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: cellar_v2.proto

package steward_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Represents a function call to a cellar that implements Cellar.sol
type CellarV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function you wish to execute on the target cellar
	//
	// Types that are assignable to Function:
	//	*CellarV2_AddPosition_
	//	*CellarV2_CallOnAdaptor_
	//	*CellarV2_RemovePosition_
	//	*CellarV2_SetHoldingPosition_
	//	*CellarV2_SetStrategistPayoutAddress_
	//	*CellarV2_SwapPositions_
	//	*CellarV2_SetRebalanceDeviation_
	//	*CellarV2_SetShareLockPeriod_
	Function isCellarV2_Function `protobuf_oneof:"function"`
}

func (x *CellarV2) Reset() {
	*x = CellarV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2) ProtoMessage() {}

func (x *CellarV2) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2.ProtoReflect.Descriptor instead.
func (*CellarV2) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0}
}

func (m *CellarV2) GetFunction() isCellarV2_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2) GetAddPosition() *CellarV2_AddPosition {
	if x, ok := x.GetFunction().(*CellarV2_AddPosition_); ok {
		return x.AddPosition
	}
	return nil
}

func (x *CellarV2) GetCallOnAdaptor() *CellarV2_CallOnAdaptor {
	if x, ok := x.GetFunction().(*CellarV2_CallOnAdaptor_); ok {
		return x.CallOnAdaptor
	}
	return nil
}

func (x *CellarV2) GetRemovePosition() *CellarV2_RemovePosition {
	if x, ok := x.GetFunction().(*CellarV2_RemovePosition_); ok {
		return x.RemovePosition
	}
	return nil
}

func (x *CellarV2) GetSetHoldingPosition() *CellarV2_SetHoldingPosition {
	if x, ok := x.GetFunction().(*CellarV2_SetHoldingPosition_); ok {
		return x.SetHoldingPosition
	}
	return nil
}

func (x *CellarV2) GetSetStrategistPayoutAddress() *CellarV2_SetStrategistPayoutAddress {
	if x, ok := x.GetFunction().(*CellarV2_SetStrategistPayoutAddress_); ok {
		return x.SetStrategistPayoutAddress
	}
	return nil
}

func (x *CellarV2) GetSwapPositions() *CellarV2_SwapPositions {
	if x, ok := x.GetFunction().(*CellarV2_SwapPositions_); ok {
		return x.SwapPositions
	}
	return nil
}

func (x *CellarV2) GetSetRebalanceDeviation() *CellarV2_SetRebalanceDeviation {
	if x, ok := x.GetFunction().(*CellarV2_SetRebalanceDeviation_); ok {
		return x.SetRebalanceDeviation
	}
	return nil
}

func (x *CellarV2) GetSetShareLockPeriod() *CellarV2_SetShareLockPeriod {
	if x, ok := x.GetFunction().(*CellarV2_SetShareLockPeriod_); ok {
		return x.SetShareLockPeriod
	}
	return nil
}

type isCellarV2_Function interface {
	isCellarV2_Function()
}

type CellarV2_AddPosition_ struct {
	// Represents function `addPosition(uint256 index, address position)`
	AddPosition *CellarV2_AddPosition `protobuf:"bytes,1,opt,name=add_position,json=addPosition,proto3,oneof"`
}

type CellarV2_CallOnAdaptor_ struct {
	// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
	CallOnAdaptor *CellarV2_CallOnAdaptor `protobuf:"bytes,2,opt,name=call_on_adaptor,json=callOnAdaptor,proto3,oneof"`
}

type CellarV2_RemovePosition_ struct {
	// Represents function `removePosition(uint256 index)`
	RemovePosition *CellarV2_RemovePosition `protobuf:"bytes,3,opt,name=remove_position,json=removePosition,proto3,oneof"`
}

type CellarV2_SetHoldingPosition_ struct {
	// Represents function `setHoldingPosition(uint32 position_id)`
	SetHoldingPosition *CellarV2_SetHoldingPosition `protobuf:"bytes,4,opt,name=set_holding_position,json=setHoldingPosition,proto3,oneof"`
}

type CellarV2_SetStrategistPayoutAddress_ struct {
	// Represents function `setStrategistPayoutAddress(address payout)`
	SetStrategistPayoutAddress *CellarV2_SetStrategistPayoutAddress `protobuf:"bytes,5,opt,name=set_strategist_payout_address,json=setStrategistPayoutAddress,proto3,oneof"`
}

type CellarV2_SwapPositions_ struct {
	// Represents function `swapPositions(uint256 index1, uint256 index2)`
	SwapPositions *CellarV2_SwapPositions `protobuf:"bytes,6,opt,name=swap_positions,json=swapPositions,proto3,oneof"`
}

type CellarV2_SetRebalanceDeviation_ struct {
	// Represents function `setRebalanceDeviation(uint265)`
	SetRebalanceDeviation *CellarV2_SetRebalanceDeviation `protobuf:"bytes,7,opt,name=set_rebalance_deviation,json=setRebalanceDeviation,proto3,oneof"`
}

type CellarV2_SetShareLockPeriod_ struct {
	// Represents function `setShareLockPeriod(uint256 newLock)`
	SetShareLockPeriod *CellarV2_SetShareLockPeriod `protobuf:"bytes,8,opt,name=set_share_lock_period,json=setShareLockPeriod,proto3,oneof"`
}

func (*CellarV2_AddPosition_) isCellarV2_Function() {}

func (*CellarV2_CallOnAdaptor_) isCellarV2_Function() {}

func (*CellarV2_RemovePosition_) isCellarV2_Function() {}

func (*CellarV2_SetHoldingPosition_) isCellarV2_Function() {}

func (*CellarV2_SetStrategistPayoutAddress_) isCellarV2_Function() {}

func (*CellarV2_SwapPositions_) isCellarV2_Function() {}

func (*CellarV2_SetRebalanceDeviation_) isCellarV2_Function() {}

func (*CellarV2_SetShareLockPeriod_) isCellarV2_Function() {}

//
// Represent a function call initiated through a governance proposal
type CellarV2Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The function to call on the target cellar
	//
	// Types that are assignable to Function:
	//	*CellarV2Governance_InitiateShutdown_
	//	*CellarV2Governance_LiftShutdown_
	//	*CellarV2Governance_SetPlatformFee_
	//	*CellarV2Governance_SetStrategistPlatformCut_
	//	*CellarV2Governance_SetupAdaptor_
	Function isCellarV2Governance_Function `protobuf_oneof:"function"`
}

func (x *CellarV2Governance) Reset() {
	*x = CellarV2Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance) ProtoMessage() {}

func (x *CellarV2Governance) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance.ProtoReflect.Descriptor instead.
func (*CellarV2Governance) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1}
}

func (m *CellarV2Governance) GetFunction() isCellarV2Governance_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *CellarV2Governance) GetInitiateShutdown() *CellarV2Governance_InitiateShutdown {
	if x, ok := x.GetFunction().(*CellarV2Governance_InitiateShutdown_); ok {
		return x.InitiateShutdown
	}
	return nil
}

func (x *CellarV2Governance) GetLiftShutdown() *CellarV2Governance_LiftShutdown {
	if x, ok := x.GetFunction().(*CellarV2Governance_LiftShutdown_); ok {
		return x.LiftShutdown
	}
	return nil
}

func (x *CellarV2Governance) GetSetPlatformFee() *CellarV2Governance_SetPlatformFee {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetPlatformFee_); ok {
		return x.SetPlatformFee
	}
	return nil
}

func (x *CellarV2Governance) GetSetStrategistPlatformCut() *CellarV2Governance_SetStrategistPlatformCut {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetStrategistPlatformCut_); ok {
		return x.SetStrategistPlatformCut
	}
	return nil
}

func (x *CellarV2Governance) GetSetupAdaptor() *CellarV2Governance_SetupAdaptor {
	if x, ok := x.GetFunction().(*CellarV2Governance_SetupAdaptor_); ok {
		return x.SetupAdaptor
	}
	return nil
}

type isCellarV2Governance_Function interface {
	isCellarV2Governance_Function()
}

type CellarV2Governance_InitiateShutdown_ struct {
	// Represents function `initiateShutdown()`
	InitiateShutdown *CellarV2Governance_InitiateShutdown `protobuf:"bytes,1,opt,name=initiate_shutdown,json=initiateShutdown,proto3,oneof"`
}

type CellarV2Governance_LiftShutdown_ struct {
	// Represents function `liftShutdown()`
	LiftShutdown *CellarV2Governance_LiftShutdown `protobuf:"bytes,2,opt,name=lift_shutdown,json=liftShutdown,proto3,oneof"`
}

type CellarV2Governance_SetPlatformFee_ struct {
	// Represents function `setPlatformFee(uint256)`
	SetPlatformFee *CellarV2Governance_SetPlatformFee `protobuf:"bytes,3,opt,name=set_platform_fee,json=setPlatformFee,proto3,oneof"`
}

type CellarV2Governance_SetStrategistPlatformCut_ struct {
	// Represents function `setStrategistPlatformCut(address)`
	SetStrategistPlatformCut *CellarV2Governance_SetStrategistPlatformCut `protobuf:"bytes,4,opt,name=set_strategist_platform_cut,json=setStrategistPlatformCut,proto3,oneof"`
}

type CellarV2Governance_SetupAdaptor_ struct {
	// Represents function `setupAdaptor(address adaptor)`
	SetupAdaptor *CellarV2Governance_SetupAdaptor `protobuf:"bytes,5,opt,name=setup_adaptor,json=setupAdaptor,proto3,oneof"`
}

func (*CellarV2Governance_InitiateShutdown_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_LiftShutdown_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetPlatformFee_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetStrategistPlatformCut_) isCellarV2Governance_Function() {}

func (*CellarV2Governance_SetupAdaptor_) isCellarV2Governance_Function() {}

//
// Insert a trusted position to the list of positions used by the cellar at a given index.
//
// Represents function `addPosition(uint32 index, uint32 positionId, bytes configurationData, bool inDebtArray)`
type CellarV2_AddPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to add the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The position's ID in the cellar registry
	PositionId uint32 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// Data used to configure how the position behaves
	ConfigurationData []byte `protobuf:"bytes,3,opt,name=configuration_data,json=configurationData,proto3" json:"configuration_data,omitempty"`
	// Whether to add position in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,4,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_AddPosition) Reset() {
	*x = CellarV2_AddPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_AddPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_AddPosition) ProtoMessage() {}

func (x *CellarV2_AddPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_AddPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_AddPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CellarV2_AddPosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_AddPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *CellarV2_AddPosition) GetConfigurationData() []byte {
	if x != nil {
		return x.ConfigurationData
	}
	return nil
}

func (x *CellarV2_AddPosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

// Represents a call to adaptor an. The cellar must be authorized to call the target adaptor.
type CellarV2_AdaptorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
	// The function call data for the adaptor
	//
	// Types that are assignable to CallData:
	//	*CellarV2_AdaptorCall_UniswapV3Calls
	//	*CellarV2_AdaptorCall_AaveATokenCalls
	//	*CellarV2_AdaptorCall_AaveDebtTokenCalls
	//	*CellarV2_AdaptorCall_CompoundCTokenCalls
	//	*CellarV2_AdaptorCall_VestingSimpleCalls
	CallData isCellarV2_AdaptorCall_CallData `protobuf_oneof:"call_data"`
}

func (x *CellarV2_AdaptorCall) Reset() {
	*x = CellarV2_AdaptorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_AdaptorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_AdaptorCall) ProtoMessage() {}

func (x *CellarV2_AdaptorCall) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_AdaptorCall.ProtoReflect.Descriptor instead.
func (*CellarV2_AdaptorCall) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CellarV2_AdaptorCall) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

func (m *CellarV2_AdaptorCall) GetCallData() isCellarV2_AdaptorCall_CallData {
	if m != nil {
		return m.CallData
	}
	return nil
}

func (x *CellarV2_AdaptorCall) GetUniswapV3Calls() *UniswapV3AdaptorCalls {
	if x, ok := x.GetCallData().(*CellarV2_AdaptorCall_UniswapV3Calls); ok {
		return x.UniswapV3Calls
	}
	return nil
}

func (x *CellarV2_AdaptorCall) GetAaveATokenCalls() *AaveATokenAdaptorCalls {
	if x, ok := x.GetCallData().(*CellarV2_AdaptorCall_AaveATokenCalls); ok {
		return x.AaveATokenCalls
	}
	return nil
}

func (x *CellarV2_AdaptorCall) GetAaveDebtTokenCalls() *AaveDebtTokenAdaptorCalls {
	if x, ok := x.GetCallData().(*CellarV2_AdaptorCall_AaveDebtTokenCalls); ok {
		return x.AaveDebtTokenCalls
	}
	return nil
}

func (x *CellarV2_AdaptorCall) GetCompoundCTokenCalls() *CompoundCTokenAdaptorCalls {
	if x, ok := x.GetCallData().(*CellarV2_AdaptorCall_CompoundCTokenCalls); ok {
		return x.CompoundCTokenCalls
	}
	return nil
}

func (x *CellarV2_AdaptorCall) GetVestingSimpleCalls() *VestingSimpleAdaptorCalls {
	if x, ok := x.GetCallData().(*CellarV2_AdaptorCall_VestingSimpleCalls); ok {
		return x.VestingSimpleCalls
	}
	return nil
}

type isCellarV2_AdaptorCall_CallData interface {
	isCellarV2_AdaptorCall_CallData()
}

type CellarV2_AdaptorCall_UniswapV3Calls struct {
	// Represents function calls to the UniswapV3Adaptor
	UniswapV3Calls *UniswapV3AdaptorCalls `protobuf:"bytes,2,opt,name=uniswap_v3_calls,json=uniswapV3Calls,proto3,oneof"`
}

type CellarV2_AdaptorCall_AaveATokenCalls struct {
	// Represents function calls to the AaveATokenAdaptor
	AaveATokenCalls *AaveATokenAdaptorCalls `protobuf:"bytes,3,opt,name=aave_a_token_calls,json=aaveATokenCalls,proto3,oneof"`
}

type CellarV2_AdaptorCall_AaveDebtTokenCalls struct {
	// Represents function calls to the AavaDebtTokenAdaptor
	AaveDebtTokenCalls *AaveDebtTokenAdaptorCalls `protobuf:"bytes,4,opt,name=aave_debt_token_calls,json=aaveDebtTokenCalls,proto3,oneof"`
}

type CellarV2_AdaptorCall_CompoundCTokenCalls struct {
	// Represents function calls to the CompoundCTokenAdaptor
	CompoundCTokenCalls *CompoundCTokenAdaptorCalls `protobuf:"bytes,5,opt,name=compound_c_token_calls,json=compoundCTokenCalls,proto3,oneof"`
}

type CellarV2_AdaptorCall_VestingSimpleCalls struct {
	// Represents function calls to the VestingSimpleAdaptor
	VestingSimpleCalls *VestingSimpleAdaptorCalls `protobuf:"bytes,6,opt,name=vesting_simple_calls,json=vestingSimpleCalls,proto3,oneof"`
}

func (*CellarV2_AdaptorCall_UniswapV3Calls) isCellarV2_AdaptorCall_CallData() {}

func (*CellarV2_AdaptorCall_AaveATokenCalls) isCellarV2_AdaptorCall_CallData() {}

func (*CellarV2_AdaptorCall_AaveDebtTokenCalls) isCellarV2_AdaptorCall_CallData() {}

func (*CellarV2_AdaptorCall_CompoundCTokenCalls) isCellarV2_AdaptorCall_CallData() {}

func (*CellarV2_AdaptorCall_VestingSimpleCalls) isCellarV2_AdaptorCall_CallData() {}

//
// Allows strategists to manage their Cellar using arbitrary logic calls to adaptors.
//
// Represents function `callOnAdaptor(AdaptorCall[] memory data)`
type CellarV2_CallOnAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CellarV2_AdaptorCall `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CellarV2_CallOnAdaptor) Reset() {
	*x = CellarV2_CallOnAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_CallOnAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_CallOnAdaptor) ProtoMessage() {}

func (x *CellarV2_CallOnAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_CallOnAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2_CallOnAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CellarV2_CallOnAdaptor) GetData() []*CellarV2_AdaptorCall {
	if x != nil {
		return x.Data
	}
	return nil
}

//
// Remove the position at a given index from the list of positions used by the cellar.
//
// Represents function `removePosition(uint32 index, bool inDebtArray)`
type CellarV2_RemovePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index at which to remove the position
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Whether to remove position from the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,2,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_RemovePosition) Reset() {
	*x = CellarV2_RemovePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_RemovePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_RemovePosition) ProtoMessage() {}

func (x *CellarV2_RemovePosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_RemovePosition.ProtoReflect.Descriptor instead.
func (*CellarV2_RemovePosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CellarV2_RemovePosition) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CellarV2_RemovePosition) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Set the holding position used of the cellar.
//
// Represents function `setHoldingIndex(uint8 index)`
type CellarV2_SetHoldingPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (index) of the new holding position to use
	PositionId uint32 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *CellarV2_SetHoldingPosition) Reset() {
	*x = CellarV2_SetHoldingPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetHoldingPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetHoldingPosition) ProtoMessage() {}

func (x *CellarV2_SetHoldingPosition) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetHoldingPosition.ProtoReflect.Descriptor instead.
func (*CellarV2_SetHoldingPosition) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CellarV2_SetHoldingPosition) GetPositionId() uint32 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

//
// Sets the Strategists payout address.
//
// Represents function `setStrategistPayoutAddress(address payout)`
type CellarV2_SetStrategistPayoutAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payout string `protobuf:"bytes,1,opt,name=payout,proto3" json:"payout,omitempty"`
}

func (x *CellarV2_SetStrategistPayoutAddress) Reset() {
	*x = CellarV2_SetStrategistPayoutAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetStrategistPayoutAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetStrategistPayoutAddress) ProtoMessage() {}

func (x *CellarV2_SetStrategistPayoutAddress) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetStrategistPayoutAddress.ProtoReflect.Descriptor instead.
func (*CellarV2_SetStrategistPayoutAddress) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 5}
}

func (x *CellarV2_SetStrategistPayoutAddress) GetPayout() string {
	if x != nil {
		return x.Payout
	}
	return ""
}

//
// Swap the positions at two given indeces.
//
// Represents function `swapPositions(uint32 index1, uint32 index2)`
type CellarV2_SwapPositions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the first position
	Index_1 uint32 `protobuf:"varint,1,opt,name=index_1,json=index1,proto3" json:"index_1,omitempty"`
	// Index of the second position
	Index_2 uint32 `protobuf:"varint,2,opt,name=index_2,json=index2,proto3" json:"index_2,omitempty"`
	// Whether to switch positions in the debt array, or the credit array.
	InDebtArray bool `protobuf:"varint,3,opt,name=in_debt_array,json=inDebtArray,proto3" json:"in_debt_array,omitempty"`
}

func (x *CellarV2_SwapPositions) Reset() {
	*x = CellarV2_SwapPositions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SwapPositions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SwapPositions) ProtoMessage() {}

func (x *CellarV2_SwapPositions) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SwapPositions.ProtoReflect.Descriptor instead.
func (*CellarV2_SwapPositions) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 6}
}

func (x *CellarV2_SwapPositions) GetIndex_1() uint32 {
	if x != nil {
		return x.Index_1
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetIndex_2() uint32 {
	if x != nil {
		return x.Index_2
	}
	return 0
}

func (x *CellarV2_SwapPositions) GetInDebtArray() bool {
	if x != nil {
		return x.InDebtArray
	}
	return false
}

//
// Allows share lock period to be updated.
//
// Represents function `setShareLockPeriod()`
type CellarV2_SetShareLockPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLock string `protobuf:"bytes,1,opt,name=new_lock,json=newLock,proto3" json:"new_lock,omitempty"`
}

func (x *CellarV2_SetShareLockPeriod) Reset() {
	*x = CellarV2_SetShareLockPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetShareLockPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetShareLockPeriod) ProtoMessage() {}

func (x *CellarV2_SetShareLockPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetShareLockPeriod.ProtoReflect.Descriptor instead.
func (*CellarV2_SetShareLockPeriod) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 7}
}

func (x *CellarV2_SetShareLockPeriod) GetNewLock() string {
	if x != nil {
		return x.NewLock
	}
	return ""
}

//
// Changes the cellar's allowed rebalance deviation, which is the percent the total assets of a cellar may deviate
// during a `callOnAdaptor`(rebalance) call. The maximum allowed deviation is 100000000000000000 (0.1e18), or 10%.
//
// Represents function `setRebalanceDeviation(uint256)`
type CellarV2_SetRebalanceDeviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDeviation string `protobuf:"bytes,1,opt,name=new_deviation,json=newDeviation,proto3" json:"new_deviation,omitempty"`
}

func (x *CellarV2_SetRebalanceDeviation) Reset() {
	*x = CellarV2_SetRebalanceDeviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2_SetRebalanceDeviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2_SetRebalanceDeviation) ProtoMessage() {}

func (x *CellarV2_SetRebalanceDeviation) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2_SetRebalanceDeviation.ProtoReflect.Descriptor instead.
func (*CellarV2_SetRebalanceDeviation) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{0, 8}
}

func (x *CellarV2_SetRebalanceDeviation) GetNewDeviation() string {
	if x != nil {
		return x.NewDeviation
	}
	return ""
}

// Represents function `initiateShutdown()`
type CellarV2Governance_InitiateShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2Governance_InitiateShutdown) Reset() {
	*x = CellarV2Governance_InitiateShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_InitiateShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_InitiateShutdown) ProtoMessage() {}

func (x *CellarV2Governance_InitiateShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_InitiateShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_InitiateShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 0}
}

// Represents function `liftShutdown()`
type CellarV2Governance_LiftShutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CellarV2Governance_LiftShutdown) Reset() {
	*x = CellarV2Governance_LiftShutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_LiftShutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_LiftShutdown) ProtoMessage() {}

func (x *CellarV2Governance_LiftShutdown) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_LiftShutdown.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_LiftShutdown) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 1}
}

// Represents function `setPlatformFee(uint64)`
type CellarV2Governance_SetPlatformFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New platform fee
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2Governance_SetPlatformFee) Reset() {
	*x = CellarV2Governance_SetPlatformFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetPlatformFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetPlatformFee) ProtoMessage() {}

func (x *CellarV2Governance_SetPlatformFee) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetPlatformFee.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetPlatformFee) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CellarV2Governance_SetPlatformFee) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Represents function `setStrategistPlatformCut(uint64)`
type CellarV2Governance_SetStrategistPlatformCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New strategist platform cut
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CellarV2Governance_SetStrategistPlatformCut) Reset() {
	*x = CellarV2Governance_SetStrategistPlatformCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetStrategistPlatformCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetStrategistPlatformCut) ProtoMessage() {}

func (x *CellarV2Governance_SetStrategistPlatformCut) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetStrategistPlatformCut.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetStrategistPlatformCut) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 3}
}

func (x *CellarV2Governance_SetStrategistPlatformCut) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

//
// Allows owner to add new adaptors for the cellar to use.
//
// Represents function `setupAdaptor(address adaptor)`
type CellarV2Governance_SetupAdaptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the adaptor
	Adaptor string `protobuf:"bytes,1,opt,name=adaptor,proto3" json:"adaptor,omitempty"`
}

func (x *CellarV2Governance_SetupAdaptor) Reset() {
	*x = CellarV2Governance_SetupAdaptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellar_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellarV2Governance_SetupAdaptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellarV2Governance_SetupAdaptor) ProtoMessage() {}

func (x *CellarV2Governance_SetupAdaptor) ProtoReflect() protoreflect.Message {
	mi := &file_cellar_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellarV2Governance_SetupAdaptor.ProtoReflect.Descriptor instead.
func (*CellarV2Governance_SetupAdaptor) Descriptor() ([]byte, []int) {
	return file_cellar_v2_proto_rawDescGZIP(), []int{1, 4}
}

func (x *CellarV2Governance_SetupAdaptor) GetAdaptor() string {
	if x != nil {
		return x.Adaptor
	}
	return ""
}

var File_cellar_v2_proto protoreflect.FileDescriptor

var file_cellar_v2_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x1a, 0x1b, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x61, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61, 0x61, 0x76, 0x65, 0x2f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x63, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x75, 0x6e,
	0x69, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x0e,
	0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5b, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61,
	0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x1d,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x64, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a, 0xec, 0x03,
	0x0a, 0x0b, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x55,
	0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56, 0x33, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x73, 0x77, 0x61, 0x70, 0x56,
	0x33, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x61, 0x76, 0x65, 0x5f, 0x61,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x41, 0x61, 0x76, 0x65, 0x41, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x61, 0x76, 0x65, 0x41, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x15, 0x61, 0x61, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x61, 0x76, 0x65, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x61, 0x61, 0x76, 0x65, 0x44, 0x65, 0x62, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x45, 0x0a, 0x0d,
	0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56,
	0x32, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a,
	0x35, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x65, 0x0a, 0x0d,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x62, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x1a, 0x2f, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x4c, 0x6f, 0x63, 0x6b, 0x1a, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9,
	0x05, 0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x52, 0x0a, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72,
	0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x66,
	0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69, 0x66,
	0x74, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46,
	0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x65, 0x65, 0x12, 0x78, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x74, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x52,
	0x0a, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x56, 0x32, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x6f, 0x72, 0x1a, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x66, 0x74, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x28, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x32, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x28, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x61, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x73,
	0x74, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellar_v2_proto_rawDescOnce sync.Once
	file_cellar_v2_proto_rawDescData = file_cellar_v2_proto_rawDesc
)

func file_cellar_v2_proto_rawDescGZIP() []byte {
	file_cellar_v2_proto_rawDescOnce.Do(func() {
		file_cellar_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellar_v2_proto_rawDescData)
	})
	return file_cellar_v2_proto_rawDescData
}

var file_cellar_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cellar_v2_proto_goTypes = []interface{}{
	(*CellarV2)(nil),                                    // 0: steward.v3.CellarV2
	(*CellarV2Governance)(nil),                          // 1: steward.v3.CellarV2Governance
	(*CellarV2_AddPosition)(nil),                        // 2: steward.v3.CellarV2.AddPosition
	(*CellarV2_AdaptorCall)(nil),                        // 3: steward.v3.CellarV2.AdaptorCall
	(*CellarV2_CallOnAdaptor)(nil),                      // 4: steward.v3.CellarV2.CallOnAdaptor
	(*CellarV2_RemovePosition)(nil),                     // 5: steward.v3.CellarV2.RemovePosition
	(*CellarV2_SetHoldingPosition)(nil),                 // 6: steward.v3.CellarV2.SetHoldingPosition
	(*CellarV2_SetStrategistPayoutAddress)(nil),         // 7: steward.v3.CellarV2.SetStrategistPayoutAddress
	(*CellarV2_SwapPositions)(nil),                      // 8: steward.v3.CellarV2.SwapPositions
	(*CellarV2_SetShareLockPeriod)(nil),                 // 9: steward.v3.CellarV2.SetShareLockPeriod
	(*CellarV2_SetRebalanceDeviation)(nil),              // 10: steward.v3.CellarV2.SetRebalanceDeviation
	(*CellarV2Governance_InitiateShutdown)(nil),         // 11: steward.v3.CellarV2Governance.InitiateShutdown
	(*CellarV2Governance_LiftShutdown)(nil),             // 12: steward.v3.CellarV2Governance.LiftShutdown
	(*CellarV2Governance_SetPlatformFee)(nil),           // 13: steward.v3.CellarV2Governance.SetPlatformFee
	(*CellarV2Governance_SetStrategistPlatformCut)(nil), // 14: steward.v3.CellarV2Governance.SetStrategistPlatformCut
	(*CellarV2Governance_SetupAdaptor)(nil),             // 15: steward.v3.CellarV2Governance.SetupAdaptor
	(*UniswapV3AdaptorCalls)(nil),                       // 16: steward.v3.UniswapV3AdaptorCalls
	(*AaveATokenAdaptorCalls)(nil),                      // 17: steward.v3.AaveATokenAdaptorCalls
	(*AaveDebtTokenAdaptorCalls)(nil),                   // 18: steward.v3.AaveDebtTokenAdaptorCalls
	(*CompoundCTokenAdaptorCalls)(nil),                  // 19: steward.v3.CompoundCTokenAdaptorCalls
	(*VestingSimpleAdaptorCalls)(nil),                   // 20: steward.v3.VestingSimpleAdaptorCalls
}
var file_cellar_v2_proto_depIdxs = []int32{
	2,  // 0: steward.v3.CellarV2.add_position:type_name -> steward.v3.CellarV2.AddPosition
	4,  // 1: steward.v3.CellarV2.call_on_adaptor:type_name -> steward.v3.CellarV2.CallOnAdaptor
	5,  // 2: steward.v3.CellarV2.remove_position:type_name -> steward.v3.CellarV2.RemovePosition
	6,  // 3: steward.v3.CellarV2.set_holding_position:type_name -> steward.v3.CellarV2.SetHoldingPosition
	7,  // 4: steward.v3.CellarV2.set_strategist_payout_address:type_name -> steward.v3.CellarV2.SetStrategistPayoutAddress
	8,  // 5: steward.v3.CellarV2.swap_positions:type_name -> steward.v3.CellarV2.SwapPositions
	10, // 6: steward.v3.CellarV2.set_rebalance_deviation:type_name -> steward.v3.CellarV2.SetRebalanceDeviation
	9,  // 7: steward.v3.CellarV2.set_share_lock_period:type_name -> steward.v3.CellarV2.SetShareLockPeriod
	11, // 8: steward.v3.CellarV2Governance.initiate_shutdown:type_name -> steward.v3.CellarV2Governance.InitiateShutdown
	12, // 9: steward.v3.CellarV2Governance.lift_shutdown:type_name -> steward.v3.CellarV2Governance.LiftShutdown
	13, // 10: steward.v3.CellarV2Governance.set_platform_fee:type_name -> steward.v3.CellarV2Governance.SetPlatformFee
	14, // 11: steward.v3.CellarV2Governance.set_strategist_platform_cut:type_name -> steward.v3.CellarV2Governance.SetStrategistPlatformCut
	15, // 12: steward.v3.CellarV2Governance.setup_adaptor:type_name -> steward.v3.CellarV2Governance.SetupAdaptor
	16, // 13: steward.v3.CellarV2.AdaptorCall.uniswap_v3_calls:type_name -> steward.v3.UniswapV3AdaptorCalls
	17, // 14: steward.v3.CellarV2.AdaptorCall.aave_a_token_calls:type_name -> steward.v3.AaveATokenAdaptorCalls
	18, // 15: steward.v3.CellarV2.AdaptorCall.aave_debt_token_calls:type_name -> steward.v3.AaveDebtTokenAdaptorCalls
	19, // 16: steward.v3.CellarV2.AdaptorCall.compound_c_token_calls:type_name -> steward.v3.CompoundCTokenAdaptorCalls
	20, // 17: steward.v3.CellarV2.AdaptorCall.vesting_simple_calls:type_name -> steward.v3.VestingSimpleAdaptorCalls
	3,  // 18: steward.v3.CellarV2.CallOnAdaptor.data:type_name -> steward.v3.CellarV2.AdaptorCall
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_cellar_v2_proto_init() }
func file_cellar_v2_proto_init() {
	if File_cellar_v2_proto != nil {
		return
	}
	file_adaptors_aave_a_token_proto_init()
	file_adaptors_aave_debt_token_proto_init()
	file_adaptors_compound_c_token_proto_init()
	file_adaptors_uniswap_uniswap_v3_proto_init()
	file_adaptors_vesting_simple_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cellar_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_AddPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_AdaptorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_CallOnAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_RemovePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetHoldingPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetStrategistPayoutAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SwapPositions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetShareLockPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2_SetRebalanceDeviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_InitiateShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_LiftShutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetPlatformFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetStrategistPlatformCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellar_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellarV2Governance_SetupAdaptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cellar_v2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CellarV2_AddPosition_)(nil),
		(*CellarV2_CallOnAdaptor_)(nil),
		(*CellarV2_RemovePosition_)(nil),
		(*CellarV2_SetHoldingPosition_)(nil),
		(*CellarV2_SetStrategistPayoutAddress_)(nil),
		(*CellarV2_SwapPositions_)(nil),
		(*CellarV2_SetRebalanceDeviation_)(nil),
		(*CellarV2_SetShareLockPeriod_)(nil),
	}
	file_cellar_v2_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CellarV2Governance_InitiateShutdown_)(nil),
		(*CellarV2Governance_LiftShutdown_)(nil),
		(*CellarV2Governance_SetPlatformFee_)(nil),
		(*CellarV2Governance_SetStrategistPlatformCut_)(nil),
		(*CellarV2Governance_SetupAdaptor_)(nil),
	}
	file_cellar_v2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CellarV2_AdaptorCall_UniswapV3Calls)(nil),
		(*CellarV2_AdaptorCall_AaveATokenCalls)(nil),
		(*CellarV2_AdaptorCall_AaveDebtTokenCalls)(nil),
		(*CellarV2_AdaptorCall_CompoundCTokenCalls)(nil),
		(*CellarV2_AdaptorCall_VestingSimpleCalls)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellar_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellar_v2_proto_goTypes,
		DependencyIndexes: file_cellar_v2_proto_depIdxs,
		MessageInfos:      file_cellar_v2_proto_msgTypes,
	}.Build()
	File_cellar_v2_proto = out.File
	file_cellar_v2_proto_rawDesc = nil
	file_cellar_v2_proto_goTypes = nil
	file_cellar_v2_proto_depIdxs = nil
}
